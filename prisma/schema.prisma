generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String   @id @default(uuid())
  email                           String   @unique
  phone                           String?
  avatarUrl                       String?
  name                            String?
  proposalThankYouMessageTitle    String?
  proposalThankYouMessageSubtitle String?
  password                        String?
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt

  userKeys UserKey[]
  Proposal Proposal[]
  Customer Customer[]

  @@map("users")
}

model UserKey {
  id        String   @id @default(uuid())
  key       String   @unique
  type      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@map("user_keys")
}

model Proposal {
  id            String                @id @default(uuid())
  title         String
  coverUrl      String?
  status        ProposalStatus        @default(INCOMPLETE)
  departureDate DateTime?
  returnDate    DateTime?
  userId        String
  user          User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  destinations  ProposalDestination[] @relation("ProposalToDestinations")
  dayByDays     ProposalDayByDay[]    @relation("ProposalToDayByDays")
}

model ProposalDestination {
  id            String    @id @default(uuid())
  name          String
  images        String[]
  description   String?
  departureDate DateTime?
  returnDate    DateTime?
  proposalId    String
  proposal      Proposal  @relation(fields: [proposalId], references: [id], onDelete: Cascade, name: "ProposalToDestinations")
  createdAt     DateTime  @default(now())
}

model ProposalDayByDay {
  id            String    @id @default(uuid())
  title         String
  images        String[]
  description   String?
  departureDate DateTime?
  returnDate    DateTime?
  proposalId    String
  proposal      Proposal  @relation(fields: [proposalId], references: [id], onDelete: Cascade, name: "ProposalToDayByDays")
  createdAt     DateTime  @default(now())
}

model Customer {
  id                      String    @id @default(uuid())
  userId                  String
  fullName                String
  imageUrl                String?
  nickname                String?
  rg                      String?
  cpf                     String?
  birthDate               DateTime?
  email                   String?
  phone                   String?
  maritalStatus           String?
  profession              String?
  numberOfChildren        Int?
  postalCode              String?
  address                 String?
  addressNumber           String?
  neighborhood            String?
  complement              String?
  city                    String?
  state                   String?
  country                 String?
  family                  String[]
  accommodationPreference String[]
  airPreference           String[]
  travelStyle             String[]
  interestedExperiences   String[]
  dreamTrips              String[]
  recentTrips             String[]
  tags                    String[]
  observation             String?
  referralSource          String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])

  documents CustomerDocument[]

  @@map("customers")
}

model CustomerDocument {
  id             String    @id @default(uuid())
  url            String
  type           String
  name           String?
  issueDate      DateTime?
  expirationDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Customer       Customer? @relation(fields: [customerId], references: [id])
  customerId     String?

  @@map("customer_documents")
}

enum ProposalStatus {
  INCOMPLETE
  AWAITING_RESPONSE
  CONFIRMED
  LOST
}
