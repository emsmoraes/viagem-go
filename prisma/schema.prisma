generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                              String   @id @default(uuid())
  email                           String   @unique
  phone                           String?
  avatarUrl                       String?
  name                            String?
  proposalThankYouMessageTitle    String?
  proposalThankYouMessageSubtitle String?
  password                        String?
  createdAt                       DateTime @default(now())
  updatedAt                       DateTime @updatedAt

  userKeys UserKey[]
  Proposal Proposal[]
  Customer Customer[]

  @@map("users")
}

model UserKey {
  id        String   @id @default(uuid())
  key       String   @unique
  type      String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@map("user_keys")
}

model Proposal {
  id             String                @id @default(uuid())
  title          String
  coverUrl       String?
  status         ProposalStatus        @default(INCOMPLETE)
  departureDate  DateTime?
  returnDate     DateTime?
  userId         String
  user           User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  destinations   ProposalDestination[] @relation("ProposalToDestinations")
  dayByDays      ProposalDayByDay[]    @relation("ProposalToDayByDays")
  passengers     Passenger[]           @relation("ProposalToPassengers")
  tickets        Ticket[]              @relation("ProposalToTickets")
  accommodations Accommodation[]       @relation("ProposalToAccommodations")
  cruises        Cruise[]              @relation("ProposalToCruises")
  transports     Transport[]           @relation("ProposalToTransports")
  experiences    Experience[]          @relation("ProposalToExperiences")
}

model ProposalDestination {
  id            String    @id @default(uuid())
  name          String
  images        String[]
  description   String?
  departureDate DateTime?
  returnDate    DateTime?
  proposalId    String
  proposal      Proposal  @relation(fields: [proposalId], references: [id], onDelete: Cascade, name: "ProposalToDestinations")
  createdAt     DateTime  @default(now())
}

model ProposalDayByDay {
  id            String    @id @default(uuid())
  title         String
  images        String[]
  description   String?
  departureDate DateTime?
  returnDate    DateTime?
  proposalId    String
  proposal      Proposal  @relation(fields: [proposalId], references: [id], onDelete: Cascade, name: "ProposalToDayByDays")
  createdAt     DateTime  @default(now())
}

model Customer {
  id                      String    @id @default(uuid())
  userId                  String
  fullName                String
  imageUrl                String?
  nickname                String?
  rg                      String?
  cpf                     String?
  birthDate               DateTime?
  email                   String?
  phone                   String?
  maritalStatus           String?
  profession              String?
  numberOfChildren        Int?
  postalCode              String?
  address                 String?
  addressNumber           String?
  neighborhood            String?
  complement              String?
  city                    String?
  state                   String?
  country                 String?
  family                  String[]
  accommodationPreference String[]
  airPreference           String[]
  travelStyle             String[]
  interestedExperiences   String[]
  dreamTrips              String[]
  recentTrips             String[]
  tags                    String[]
  observation             String?
  referralSource          String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  user       User               @relation(fields: [userId], references: [id])
  passengers Passenger[]
  documents  CustomerDocument[]

  @@map("customers")
}

model CustomerDocument {
  id             String    @id @default(uuid())
  fileUrls       String[]
  name           String
  issueDate      DateTime?
  expirationDate DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  Customer       Customer? @relation(fields: [customerId], references: [id])
  customerId     String?

  @@map("customer_documents")
}

model Passenger {
  id         String    @id @default(uuid())
  name       String
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])
  proposalId String
  proposal   Proposal  @relation(fields: [proposalId], references: [id], onDelete: Cascade, name: "ProposalToPassengers")
  createdAt  DateTime  @default(now())

  @@map("passengers")
}

model Ticket {
  id               String     @id @default(uuid())
  name             String
  type             TicketType
  baggagePerPerson Int?
  duration         Int?
  price            Decimal?   @db.Decimal(10, 2)
  imageUrls        String[]
  pdfUrls          String[]
  proposalId       String
  proposal         Proposal   @relation(fields: [proposalId], references: [id], onDelete: Cascade, name: "ProposalToTickets")
  segments         Segment[]  @relation("TicketToSegments")
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@map("tickets")
}

model Segment {
  id           String    @id @default(uuid())
  origin       String
  destination  String
  departure    DateTime?
  arrival      DateTime?
  flightNumber String?
  airline      String?
  class        String?
  duration     String?
  ticketId     String
  ticket       Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade, name: "TicketToSegments")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("segments")
}

model Accommodation {
  id          String    @id @default(uuid())
  name        String
  location    String?
  address     String?
  checkIn     DateTime?
  checkOut    DateTime?
  category    String?
  boardType   String?
  roomType    String?
  description String?
  price       Decimal?  @db.Decimal(10, 2)
  imageUrls   String[]
  pdfUrls     String[]
  proposalId  String
  proposal    Proposal  @relation(fields: [proposalId], references: [id], onDelete: Cascade, name: "ProposalToAccommodations")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("accommodations")
}

model Cruise {
  id             String    @id @default(uuid())
  name           String
  cabin          String?
  checkIn        DateTime?
  checkOut       DateTime?
  route          String?
  description    String?
  paymentMethods String?
  imageUrls      String[]
  pdfUrls        String[]
  proposalId     String
  proposal       Proposal  @relation(fields: [proposalId], references: [id], onDelete: Cascade, name: "ProposalToCruises")
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@map("cruises")
}

model Transport {
  id          String   @id @default(uuid())
  type        String
  description String?
  price       Decimal? @db.Decimal(10, 2)
  imageUrls   String[]
  pdfUrls     String[]
  proposalId  String
  proposal    Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade, name: "ProposalToTransports")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("transports")
}

model Experience {
  id          String   @id @default(uuid())
  type        String
  description String?
  price       Decimal? @db.Decimal(10, 2)
  imageUrls   String[]
  pdfUrls     String[]
  proposalId  String
  proposal    Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade, name: "ProposalToExperiences")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("experiences")
}

enum ProposalStatus {
  INCOMPLETE
  AWAITING_RESPONSE
  CONFIRMED
  LOST
}

enum TicketType {
  OUTBOUND
  INBOUND
  INTERNAL
}
